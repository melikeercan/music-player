<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.tidal.refactoring.api.PlayListControllerTests" tests="15" skipped="0" failures="0" errors="0" timestamp="2020-12-10T11:48:56" hostname="melikes-mbp-2.lan" time="0.094">
  <properties/>
  <testcase name="shouldGetPlayListsCreatedAfter()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.017"/>
  <testcase name="shouldAddTrackToPlayList()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.006"/>
  <testcase name="shouldUpdateTrackIndexInPlayList()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.005"/>
  <testcase name="shouldUpdatePlayListName()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.005"/>
  <testcase name="shouldThrowExceptionIfNameIsEmpty()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.006"/>
  <testcase name="shouldGetAllPlayLists()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldGetByArtistName()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldDeletePlayListsById()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldGetByPlayListId()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldRemoveTrackFromPlayList()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.006"/>
  <testcase name="shouldAddPlayList()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.005"/>
  <testcase name="shouldSortByDate()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.006"/>
  <testcase name="shouldDeleteAllPlayLists()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldGetAllActivePlayLists()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <testcase name="shouldThrowExceptionIfIdIsEmpty()" classname="com.tidal.refactoring.api.PlayListControllerTests" time="0.004"/>
  <system-out><![CDATA[2020-12-10 12:48:55.857  INFO 27366 --- [    Test worker] .b.t.a.w.s.WebMvcTestContextBootstrapper : Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.tidal.refactoring.api.PlayListControllerTests], using SpringBootContextLoader
2020-12-10 12:48:55.858  INFO 27366 --- [    Test worker] o.s.t.c.support.AbstractContextLoader    : Could not detect default resource locations for test class [com.tidal.refactoring.api.PlayListControllerTests]: no resource found for suffixes {-context.xml, Context.groovy}.
2020-12-10 12:48:55.858  INFO 27366 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.tidal.refactoring.api.PlayListControllerTests]: PlayListControllerTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2020-12-10 12:48:55.860  INFO 27366 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.tidal.refactoring.DemoApplication for test class com.tidal.refactoring.api.PlayListControllerTests
2020-12-10 12:48:55.860  INFO 27366 --- [    Test worker] .b.t.a.w.s.WebMvcTestContextBootstrapper : Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2020-12-10 12:48:55.861  INFO 27366 --- [    Test worker] .b.t.a.w.s.WebMvcTestContextBootstrapper : Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@5b26a750, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@bb23530, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@1992fc30, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@6e8d428b, org.springframework.test.context.support.DirtiesContextTestExecutionListener@ff642d, org.springframework.test.context.transaction.TransactionalTestExecutionListener@1afedab7, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@1403c6a4, org.springframework.test.context.event.EventPublishingTestExecutionListener@101e47b5, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@6bbb8797, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@7fcd335, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@dc01388, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@6f81ce6a, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@58316b32, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@39356e7a]

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.4.0)

2020-12-10 12:48:55.874  INFO 27366 --- [    Test worker] c.t.r.api.PlayListControllerTests        : Starting PlayListControllerTests using Java 11.0.8 on melikes-mbp-2.lan with PID 27366 (started by melikeercan in /Users/melikeercan/IdeaProjects/demo)
2020-12-10 12:48:55.874  INFO 27366 --- [    Test worker] c.t.r.api.PlayListControllerTests        : No active profile set, falling back to default profiles: default
2020-12-10 12:48:56.098  INFO 27366 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-12-10 12:48:56.217  INFO 27366 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2020-12-10 12:48:56.217  INFO 27366 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2020-12-10 12:48:56.218  INFO 27366 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 1 ms
2020-12-10 12:48:56.227  INFO 27366 --- [    Test worker] c.t.r.api.PlayListControllerTests        : Started PlayListControllerTests in 0.365 seconds (JVM running for 4.082)

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/createdAfter=1607600936231
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getPlayListsCreatedAfter(Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.238+00:00","content":[{"id":"e89f6e36-7914-433a-8aba-42bb2b616fa9","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.231+00:00","lastUpdated":"2020-12-10T11:48:56.231+00:00","deleted":false,"tracks":[],"trackSize":0}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v0/playlists/track/add
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"112"]
             Body = {"playListId":"6c6be9ac-b5b3-49ba-8587-af927a6b2ee0","trackId":"2a2758c7-fca9-4dab-9eb2-709bf9eac9a0","index":0}
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#addToPlayList(NewTrackToPlayList)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"Added track to playlist successfully","timestamp":"2020-12-10T11:48:56.250+00:00","content":{"playListId":"6c6be9ac-b5b3-49ba-8587-af927a6b2ee0","trackId":"2a2758c7-fca9-4dab-9eb2-709bf9eac9a0","index":0}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v0/playlists/track/index
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"112"]
             Body = {"playListId":"8a6d83e3-0fbf-45b2-87e8-b0b4c0c80d04","trackId":"1706912a-1709-40c4-9c4b-4379dd465e29","index":0}
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#updatePlayListIndex(NewTrackToPlayList)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"Updated track index successfully","timestamp":"2020-12-10T11:48:56.256+00:00","content":{"playListId":"8a6d83e3-0fbf-45b2-87e8-b0b4c0c80d04","trackId":"1706912a-1709-40c4-9c4b-4379dd465e29","index":0}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v0/playlists/update/name
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"83"]
             Body = {"newName":"New_Playlist_Name","playListId":"d81d2c0c-5cb3-4b88-a335-9484aee452fa"}
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#updatePlayListName(EditPlayList)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"Updated playlist name successfully","timestamp":"2020-12-10T11:48:56.263+00:00","content":{"newName":"New_Playlist_Name","playListId":"d81d2c0c-5cb3-4b88-a335-9484aee452fa"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/name=
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getByPlayListName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.tidal.refactoring.exceptions.InvalidParameterException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 406
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"NOT_ACCEPTABLE","timestamp":"10-12-2020 12:48:56","message":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getAllPlayLists()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.274+00:00","content":[{"id":"b45f752b-51b4-45b8-917d-d2c1461006d3","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.273+00:00","lastUpdated":"2020-12-10T11:48:56.273+00:00","deleted":false,"tracks":[],"trackSize":0}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/name=Test_PlayList_Name
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getByPlayListName(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.279+00:00","content":{"id":"035d4316-aaae-48b9-9e67-e5c2d3b9fb59","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.278+00:00","lastUpdated":"2020-12-10T11:48:56.278+00:00","deleted":false,"tracks":[],"trackSize":0}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/v0/playlists/f299906e-2f99-42e5-9eab-56713d84fc92
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#deleteById(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"PlayList with id f299906e-2f99-42e5-9eab-56713d84fc92 is deleted successfully","timestamp":"2020-12-10T11:48:56.284+00:00"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/id=4b11fc1a-e9fd-4b81-987b-e160704e24c2
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getById(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.289+00:00","content":{"id":"4b11fc1a-e9fd-4b81-987b-e160704e24c2","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.287+00:00","lastUpdated":"2020-12-10T11:48:56.287+00:00","deleted":false,"tracks":[],"trackSize":0}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v0/playlists/track/remove
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"102"]
             Body = {"playListId":"5de599e0-681d-4792-ba8f-257b5c673482","trackId":"c5e78704-1a89-4e21-ae71-b4dca1bfa395"}
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#removeFromPlayList(RemoveFromPlayList)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"Removed track from playlist successfully","timestamp":"2020-12-10T11:48:56.294+00:00","content":{"playListId":"5de599e0-681d-4792-ba8f-257b5c673482","trackId":"c5e78704-1a89-4e21-ae71-b4dca1bfa395"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v0/playlists/
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"37"]
             Body = {"playListName":"Test_Playlist_Name"}
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#addNewPlayList(NewPlayList)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"CREATED","message":"Created new playlist successfully","timestamp":"2020-12-10T11:48:56.300+00:00","content":{"playListName":"Test_Playlist_Name"}}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/sortByLastUpdated
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#sortPlayListsByLastUpdateDate()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.307+00:00","content":[{"id":"0cb34c8a-c523-4517-9ae4-4d7fcd958ff6","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.304+00:00","lastUpdated":"2020-12-10T11:48:56.304+00:00","deleted":false,"tracks":[],"trackSize":0},{"id":"2ccbbdbf-217b-48ec-a5d7-392f9300df16","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.304+00:00","lastUpdated":"2020-12-10T11:48:56.304+00:00","deleted":false,"tracks":[],"trackSize":0}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = DELETE
      Request URI = /api/v0/playlists/
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#deleteAllPlayLists()

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","message":"Deleted all playlists successfully","timestamp":"2020-12-10T11:48:56.311+00:00"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/isActive=true
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getAllActivePlayLists(Boolean)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"OK","timestamp":"2020-12-10T11:48:56.316+00:00","content":[{"id":"d0920a39-0556-4c65-8b2b-6c30008eb426","playListName":"Test_PlayList_Name","registeredDate":"2020-12-10T11:48:56.315+00:00","lastUpdated":"2020-12-10T11:48:56.315+00:00","deleted":false,"tracks":[],"trackSize":0}]}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v0/playlists/id=
       Parameters = {}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.tidal.refactoring.api.PlayListController
           Method = com.tidal.refactoring.api.PlayListController#getById(String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.tidal.refactoring.exceptions.InvalidParameterException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 406
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"status":"NOT_ACCEPTABLE","timestamp":"10-12-2020 12:48:56","message":null}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
